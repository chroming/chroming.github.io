<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>司开星的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="sikaixing.com/"/>
  <updated>2017-03-24T03:02:01.000Z</updated>
  <id>sikaixing.com/</id>
  
  <author>
    <name>司开星</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>近期小问题总结</title>
    <link href="sikaixing.com/2017/03/24/python_some_tips/"/>
    <id>sikaixing.com/2017/03/24/python_some_tips/</id>
    <published>2017-03-24T00:24:00.000Z</published>
    <updated>2017-03-24T03:02:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>平时遇到的一些值得记录的小问题不好拿来写一篇博客，总结一下写个集合帖。</p>
<h2 id="Python导入导出json时保留对象-object-顺序"><a href="#Python导入导出json时保留对象-object-顺序" class="headerlink" title="Python导入导出json时保留对象(object)顺序"></a>Python导入导出json时保留对象(object)顺序</h2><p><code>json.dumps</code>直接导出<code>OrderDict()</code>格式就能保留顺序;</p>
<p><code>json.loads(fp, object_pairs_hook=collections.OrderedDict)</code>即可将<code>object</code>类型都转成<code>OrderedDict()</code>类.</p>
<h2 id="pip-安装特定版本的软件包"><a href="#pip-安装特定版本的软件包" class="headerlink" title="pip 安装特定版本的软件包"></a>pip 安装特定版本的软件包</h2><p><code>pip install lxml==3.4.4</code></p>
<p>只需要下载不需要安装的话：</p>
<p><code>pip download lxml</code></p>
<h2 id="Python中调用用chrome直接打开本地页面源码"><a href="#Python中调用用chrome直接打开本地页面源码" class="headerlink" title="Python中调用用chrome直接打开本地页面源码"></a>Python中调用用chrome直接打开本地页面源码</h2><p>先下载chromedriver:  <a href="https://sites.google.com/a/chromium.org/chromedriver/downloads" target="_blank" rel="external">https://sites.google.com/a/chromium.org/chromedriver/downloads</a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"></div><div class="line">driver = webdriver.Chrome(chromedriver_path)</div><div class="line">driver.get(<span class="string">'view-source:http://www.baidu.com'</span>)</div></pre></td></tr></table></figure>
<h2 id="WebDriverException-Message-chrome-not-reachable"><a href="#WebDriverException-Message-chrome-not-reachable" class="headerlink" title="WebDriverException: Message: chrome not reachable"></a>WebDriverException: Message: chrome not reachable</h2><p><code>webdriver.quit()</code></p>
<h2 id="requests-posts参数传递str的一个问题"><a href="#requests-posts参数传递str的一个问题" class="headerlink" title="requests posts参数传递str的一个问题"></a>requests posts参数传递str的一个问题</h2><p><code>requests</code>的<code>post</code> <code>data</code>参数可以传递<code>dict</code>或者<code>str</code>，传递<code>str</code>时是原样传递的。</p>
<p>这里有个问题，<code>post</code>时<code>content-type</code>一般是<code>application/x-www-form-urlencoded</code>, 但<code>requests</code>直接<code>post</code> <code>str</code>时不会自动在<code>header</code>中加入这个参数，需要手动添加。</p>
<p>不过传递<code>dict</code>时则会自动加入并且将<code>dict</code>组合成<code>str</code>。</p>
<h2 id="PyQt中动态添加界面组件并重命名"><a href="#PyQt中动态添加界面组件并重命名" class="headerlink" title="PyQt中动态添加界面组件并重命名"></a>PyQt中动态添加界面组件并重命名</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_button_click</span><span class="params">(self)</span>:</span></div><div class="line">    new_label = QtGui.QLabel()</div><div class="line">    new_lineedit = QtGui.QLineEdit()</div><div class="line">    self.add_num += <span class="number">1</span></div><div class="line">    new_label.setText(str(self.add_num))</div><div class="line">    new_lineedit.setMinimumSize(<span class="number">500</span>, <span class="number">20</span>)</div><div class="line">    new_lineedit.setObjectName(<span class="string">'lineEdit_%s'</span> % self.add_num)</div><div class="line">    self.verticalLayout.addWidget(new_label)</div><div class="line">    self.verticalLayout_2.addWidget(new_lineedit)</div><div class="line">    self.added_lineedit.append(new_lineedit)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平时遇到的一些值得记录的小问题不好拿来写一篇博客，总结一下写个集合帖。&lt;/p&gt;
&lt;h2 id=&quot;Python导入导出json时保留对象-object-顺序&quot;&gt;&lt;a href=&quot;#Python导入导出json时保留对象-object-顺序&quot; class=&quot;headerlink
    
    </summary>
    
      <category term="编程语言" scheme="sikaixing.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="sikaixing.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/"/>
    
    
      <category term="Python" scheme="sikaixing.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>lxml.html.soupparser.fromstring() 出现ValueError Comment may not contain &#39;--&#39; or end with &#39;-&#39; 的解决办法</title>
    <link href="sikaixing.com/2017/03/21/lxml_html_soupparser/"/>
    <id>sikaixing.com/2017/03/21/lxml_html_soupparser/</id>
    <published>2017-03-21T10:00:00.000Z</published>
    <updated>2017-03-22T02:07:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初始问题"><a href="#初始问题" class="headerlink" title="初始问题"></a>初始问题</h2><p>近期在使用<code>lxml.html.soupparser.fromstring()</code>载入某个网页HTML时得到一条报错：</p>
<p><em>ValueError: All strings must be XML compatible: Unicode or ASCII, no NULL bytes or control characters</em></p>
<p>仔细对比了这个HTML与其他不会产生这个错误的HTML，发现报错的HTML中有几个ascii控制字符，即错误信息中的<em>control characters</em>。于是搜索了解决办法，在<a href="https://github.com/html5lib/html5lib-python/issues/96" target="_blank" rel="external">https://github.com/html5lib/html5lib-python/issues/96</a> 这里找到了以下函数可以删去HTML中的控制字符：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_control_characters</span><span class="params">(html)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">str_to_int</span><span class="params">(s, default, base=<span class="number">10</span>)</span>:</span></div><div class="line">        <span class="keyword">if</span> int(s, base) &lt; <span class="number">0x10000</span>:</div><div class="line">            <span class="keyword">return</span> unichr(int(s, base))</div><div class="line">        <span class="keyword">return</span> default</div><div class="line">    html = re.sub(<span class="string">ur"&amp;#(\d+);?"</span>, <span class="keyword">lambda</span> c: str_to_int(c.group(<span class="number">1</span>), c.group(<span class="number">0</span>)), html)</div><div class="line">    html = re.sub(<span class="string">ur"&amp;#[xX]([0-9a-fA-F]+);?"</span>, <span class="keyword">lambda</span> c: str_to_int(c.group(<span class="number">1</span>), c.group(<span class="number">0</span>), base=<span class="number">16</span>), html)</div><div class="line">    html = re.sub(<span class="string">ur"[\x00-\x08\x0b\x0e-\x1f\x7f]"</span>, <span class="string">""</span>, html)</div><div class="line">    <span class="keyword">return</span> html</div></pre></td></tr></table></figure>
<p>或者下面的函数(<a href="http://stackoverflow.com/questions/4324790/removing-control-characters-from-a-string-in-python)：" target="_blank" rel="external">http://stackoverflow.com/questions/4324790/removing-control-characters-from-a-string-in-python)：</a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> unicodedata</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_control_characters</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">""</span>.join(ch <span class="keyword">for</span> ch <span class="keyword">in</span> s <span class="keyword">if</span> unicodedata.category(ch)[<span class="number">0</span>]!=<span class="string">"C"</span>)</div></pre></td></tr></table></figure>
<p>测试了第一个函数发现确实可以解决问题。</p>
<h2 id="另一个问题"><a href="#另一个问题" class="headerlink" title="另一个问题"></a>另一个问题</h2><p>如果程序只是我自己运行的话问题到这就结束了。但实际上相关的服务器程序也要抓取同样的页面，而后台在抓取这个HTML后出现了另一种报错：</p>
<p><em>ValueError: Comment may not contain ‘–’ or end with ‘-‘</em></p>
<p>排查过其他原因后发现问题出在lxml的版本上。我本机的lxml版本是3.4.4, 服务器程序的版本是3.6.4。于是我把本地的lxml升级到了最新版3.7.3，出现了与服务器相同的报错。</p>
<h2 id="寻找解决办法"><a href="#寻找解决办法" class="headerlink" title="寻找解决办法"></a>寻找解决办法</h2><p>直接在Google搜索这个问题确实可以搜到一些。其中有一条<a href="http://stackoverflow.com/questions/34595275/disable-comments-check-for-in-lxml" target="_blank" rel="external">http://stackoverflow.com/questions/34595275/disable-comments-check-for-in-lxml</a> 提供了解决办法：将本地的<code>html5parser.py</code>替换成github上最新版。但实测无效，仔细查看问题觉得原因是问题中使用的方法为<code>html5parser.fromstring</code>，而我使用的是<code>soupparser.fromstring</code>。</p>
<p>搜索无果之后开始在官方文档和源码中找原因和解决办法。一段时间的查看之后发现了以下几个相关点：</p>
<ol>
<li><code>soupparser.fromstring</code>首先使用<code>BeautifulSoup</code>载入HTML, 之后再依靠<code>html.parser.makeelement</code>来生成树;</li>
<li><code>soupparser.fromstring</code>虽然有<code>makeelement</code>参数可以传递其他Element factory function，但没有文档说明如何定义自己的Element factory function ；</li>
<li><code>makeelement</code>方法继承自<code>lxml.etree</code>，但<code>etree</code>模块是用Cython（一种类似Python但会与C模块交互的语言）写的；</li>
<li>错误<em>ValueError: Comment may not contain ‘–’ or end with ‘-‘</em> 及 <em>ValueError: All strings must be XML compatible: Unicode or ASCII, no NULL bytes or control characters</em> 也是在<code>etree</code>中定义的；</li>
<li><code>BeautifulSoup</code>在载入源码后已经改变了<code>comment</code>处的结构。</li>
</ol>
<p><code>etree</code>模块并非Python写的，意味着想通过继承重写相关方法比较麻烦。</p>
<p><code>BeautifulSoup</code>会改变<code>comment</code>处结构，说不定可以从这里入手。但尝试给<code>beautifulsoup</code>参数传递了不同的<code>beautifulsoup</code> (包括bs3,bs4以及继承重写相关方法后的bs4)后发现无法解决问题。</p>
<p>于是没有在这条路上找到解决办法。</p>
<h2 id="回到起点"><a href="#回到起点" class="headerlink" title="回到起点"></a>回到起点</h2><p>回想了一开始的问题，发现只要我把控制字符删除之后就可以正常执行<code>fromstring</code>, 于是开始考虑不同版本之间的区别。查看了changelog，没有发现相关的bug fix记录。于是在virtualenv中开始测试从哪个版本开始有这个报错的：</p>
<p><code>pip install lxml==3.5.0b1</code></p>
<p>发现从3.4.4之后的版本，也就是3.5.0b1开始，就有这个报错了。看了这个版本的changelog，相关的记录只有<code>soupparser</code>的<code>BeautifulSoup</code>从<code>bs3</code>换成<code>bs4</code>了，但已经试过更换不同版本的<code>bs</code>，并没有解决问题。</p>
<p>于是只能选最无趣的办法，把服务器的<code>lxml</code>也换成3.4.4版本，并且使用之前提到的函数预先过滤HTML中的控制字符。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;初始问题&quot;&gt;&lt;a href=&quot;#初始问题&quot; class=&quot;headerlink&quot; title=&quot;初始问题&quot;&gt;&lt;/a&gt;初始问题&lt;/h2&gt;&lt;p&gt;近期在使用&lt;code&gt;lxml.html.soupparser.fromstring()&lt;/code&gt;载入某个网页HTML时
    
    </summary>
    
      <category term="编程语言" scheme="sikaixing.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="sikaixing.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/"/>
    
    
      <category term="Python" scheme="sikaixing.com/tags/Python/"/>
    
      <category term="lxml" scheme="sikaixing.com/tags/lxml/"/>
    
  </entry>
  
  <entry>
    <title>解决 lxml 处理HTML引起的标签顺序改变问题</title>
    <link href="sikaixing.com/2017/03/15/lxml_changed_html/"/>
    <id>sikaixing.com/2017/03/15/lxml_changed_html/</id>
    <published>2017-03-15T10:00:00.000Z</published>
    <updated>2017-03-22T01:56:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题细节"><a href="#问题细节" class="headerlink" title="问题细节"></a>问题细节</h2><p>近期在用lxml处理某个网页HTML源码时发现<code>&lt;font&gt;</code>标签的结束标签位置会被改变，具体来说是<code>&lt;font&gt;</code>标签本身包围了一些<code>&lt;p&gt;</code>标签，当<code>&lt;font&gt;</code>外存在<code>&lt;div</code>标签时，<code>&lt;font&gt;</code>标签的结束标签<code>&lt;/font&gt;</code>位置会被改变，原本被包围在中间的的<code>&lt;p&gt;</code>标签全部变成<code>&lt;font&gt;</code>的兄弟节点。</p>
<h2 id="寻找原因"><a href="#寻找原因" class="headerlink" title="寻找原因"></a>寻找原因</h2><p>一开始直接在google搜索问题原因，但一直没找到类似的问题。于是开始从使用的模块入手。笔者使用的HTML导入模块是<code>lxml.html.soupparser</code>，这个模块的文档中并没提到相关的问题，不过模块调用了<code>BeautifulSoup</code>模块处理HTML，于是查看了BeautifulSoup的源码。果然找到了影响这两个标签的部分：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#According to the HTML standard, each of these inline tags can</span></div><div class="line"><span class="comment">#contain another tag of the same type. Furthermore, it's common</span></div><div class="line"><span class="comment">#to actually use these tags this way.</span></div><div class="line">NESTABLE_INLINE_TAGS = (<span class="string">'span'</span>, <span class="string">'font'</span>, <span class="string">'q'</span>, <span class="string">'object'</span>, <span class="string">'bdo'</span>, <span class="string">'sub'</span>, <span class="string">'sup'</span>,</div><div class="line">                        <span class="string">'center'</span>)</div><div class="line"></div><div class="line"><span class="comment">#According to the HTML standard, these block tags can contain</span></div><div class="line"><span class="comment">#another tag of the same type. Furthermore, it's common</span></div><div class="line"><span class="comment">#to actually use these tags this way.</span></div><div class="line">NESTABLE_BLOCK_TAGS = (<span class="string">'blockquote'</span>, <span class="string">'div'</span>, <span class="string">'fieldset'</span>, <span class="string">'ins'</span>, <span class="string">'del'</span>)</div></pre></td></tr></table></figure>
<p>也就是<code>BeautifulSoup</code>是根据HTML标准来规范那些不规范的HTML，其中这两类标签根据标准只能包围类别中的标签。</p>
<p>##　解决方法</p>
<h3 id="修改源码"><a href="#修改源码" class="headerlink" title="修改源码"></a>修改源码</h3><p>最简单的方法就是直接删掉<code>BeautifulSoup</code>源码中这个list中的标签。不过这种方法弊端也很明显：会影响其他项目中引用的<code>BeautifulSoup</code>功能。要不影响其他项目可以把修改后的<code>BeautifulSoup</code>源码放在此项目中。不过这样也会影响此项目中其他用到<code>BeautifulSoup</code>的部分。</p>
<h3 id="子类修改"><a href="#子类修改" class="headerlink" title="子类修改"></a>子类修改</h3><p>更普遍的做法是继承之后通过子类修改相应属性。</p>
<p>这里有个问题，由于我们使用的实际是<code>lxml</code>，但修改属性只能通过继承<code>BeautifulSoup</code>，所以要写两个新类分别继承两个模块，这样略显麻烦。幸运的是，在查看源码的过程中发现<code>lxml.html.soupparser.fromstring()</code>方法中有一个<code>beautifulsoup</code>参数，如果没有提供这个参数则默认使用<code>BeautifulSoup</code>。这样就简单多了，不需要动<code>lxml</code>部分，只需要写个BeautifulSoup的新类即可：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> BeautifulSoup <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">new_BeautifulSoup</span><span class="params">(BeautifulSoup)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,  *args, **kwargs)</span>:</span></div><div class="line">        super(new_BeautifulSoup, self).__init__(*args, **kwargs)</div><div class="line">        super(new_BeautifulSoup, self).NESTABLE_TAGS.pop(<span class="string">'font'</span>, <span class="keyword">None</span>)</div><div class="line">        super(new_BeautifulSoup, self).NESTABLE_TAGS.pop(<span class="string">'div'</span>, <span class="keyword">None</span>)</div><div class="line">        super(new_BeautifulSoup, self).RESET_NESTING_TAGS.pop(<span class="string">'div'</span>, <span class="keyword">None</span>)</div></pre></td></tr></table></figure>
<p>虽然在源码中影响这两个标签的属性是<code>NESTABLE_INLINE_TAGS</code>和<code>NESTABLE_BLOCK_TAGS</code>，但实际测试发现直接覆写这两个属性没有效果，修改<code>NESTABLE_TAGS</code>和<code>RESET_NESTING_TAGS</code>则可以达到预期效果。</p>
<p>##　延伸问题</p>
<p>除了这种改变标签顺序的问题，lxml在导入HTML时还会影响其他结构，比如添加修改引号，修改标签多个属性的顺序等。这些问题可以当作是模块对非标准化源码(broken html)的标准化处理，在处理少量规范网页时没什么影响，但如果是要处理大量不规范网页则需要多多注意。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题细节&quot;&gt;&lt;a href=&quot;#问题细节&quot; class=&quot;headerlink&quot; title=&quot;问题细节&quot;&gt;&lt;/a&gt;问题细节&lt;/h2&gt;&lt;p&gt;近期在用lxml处理某个网页HTML源码时发现&lt;code&gt;&amp;lt;font&amp;gt;&lt;/code&gt;标签的结束标签位置会被改变，
    
    </summary>
    
      <category term="编程语言" scheme="sikaixing.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="sikaixing.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/"/>
    
    
      <category term="Python" scheme="sikaixing.com/tags/Python/"/>
    
      <category term="lxml" scheme="sikaixing.com/tags/lxml/"/>
    
  </entry>
  
  <entry>
    <title>PyQt4 中区分 QListWidget 的双击(itemDoubleClicked)和单击(itemClicked) 信号</title>
    <link href="sikaixing.com/2017/02/21/Qlistwidget_doubleclicked_with_clicked/"/>
    <id>sikaixing.com/2017/02/21/Qlistwidget_doubleclicked_with_clicked/</id>
    <published>2017-02-21T08:24:00.000Z</published>
    <updated>2017-02-21T08:24:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题来源"><a href="#问题来源" class="headerlink" title="问题来源"></a>问题来源</h2><p>QListWidget 中有itemClicked和itemDoubleClicked两个信号, 分别代表鼠标单击和鼠标双击信号. 不过如果要同时用这两个信号就会发现itemDoubleClicked 信号会触发itemClicked信号. 如果是两个无关的操作倒是没关系, 但如果正好要把这两个信号的槽定义为有关联的动作就要区分这两个信号了, 也就是让itemDoubleClicked不会触发itemClicked.</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>Qt 中对于这个问题没有现成的解决方法. 有些人建议如果能不同时使用这两个信号就不同时使用. 如果实在想用也是有办法解决的, 自己写个区分两个信号的方法即可.</p>
<p>在Stackoverflow上有这样一种写法:</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> YourClass::itemClicked(QListWidgetItem* listWidgetItem) &#123;</div><div class="line">    <span class="keyword">if</span> (!mDoubleClicked) &#123;</div><div class="line">        QTimer::singleShot(<span class="number">300</span>, <span class="keyword">this</span>, SLOT(itemClickedTimeout()));</div><div class="line">        mSingleClickedItem = listWidgetItem;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> YourClass::itemClickedTimeout() &#123;</div><div class="line">    <span class="keyword">if</span> (!mDoubleClicked) &#123;</div><div class="line">        <span class="comment">// do something, listitem has been clicked once</span></div><div class="line">    &#125; <span class="keyword">else</span> mDoubleClicked = <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> YourClass::itemDoubleClicked(QListWidgetItem* listWidgetItem) &#123;</div><div class="line">    mDoubleClicked = <span class="literal">true</span>;</div><div class="line"></div><div class="line">    <span class="comment">// do something, listitem has been clicked twice</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>转换成PyQt的写法就是:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span><span class="params">(QtGui.QMainWindow)</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">()</span>:</span></div><div class="line">        </div><div class="line">        self.is_double_clicked = <span class="keyword">False</span></div><div class="line">        self.listwidget.itemClicked.connect(self.item_clicked)</div><div class="line">        self.listwidget.itemDoubleClicked.connect(self.item_double_clicked)</div><div class="line">    </div><div class="line">    .....................................</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">item_clicked</span><span class="params">(self, item)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_double_clicked:</div><div class="line">            QtCore.QTimer.singleShot(<span class="number">300</span>, self.item_clicked_timeout)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">item_clicked_timeout</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_double_clicked:</div><div class="line">            <span class="comment"># do something when item clicked</span></div><div class="line">            <span class="keyword">pass</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.is_double_clicked = <span class="keyword">False</span></div><div class="line">            </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">item_double_clicked</span><span class="params">(self)</span>:</span></div><div class="line">        self.is_double_clicked = <span class="keyword">True</span></div><div class="line">        <span class="comment"># do something when item double clicked</span></div><div class="line">        <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>参考资料:</p>
<blockquote>
<p>《<a href="http://stackoverflow.com/questions/22142485/qlistwidget-itemclicked-and-itemdoubleclicked-block-single-click-if-double-cli" target="_blank" rel="external">QListWidget itemClicked and itemDoubleClicked - block single click if double click</a>》</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题来源&quot;&gt;&lt;a href=&quot;#问题来源&quot; class=&quot;headerlink&quot; title=&quot;问题来源&quot;&gt;&lt;/a&gt;问题来源&lt;/h2&gt;&lt;p&gt;QListWidget 中有itemClicked和itemDoubleClicked两个信号, 分别代表鼠标单击和鼠标双击
    
    </summary>
    
      <category term="编程语言" scheme="sikaixing.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="sikaixing.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/"/>
    
    
      <category term="Python" scheme="sikaixing.com/tags/Python/"/>
    
      <category term="PyQt" scheme="sikaixing.com/tags/PyQt/"/>
    
  </entry>
  
  <entry>
    <title>Dash Docset 创建指南</title>
    <link href="sikaixing.com/2017/02/19/create_dash%20docset/"/>
    <id>sikaixing.com/2017/02/19/create_dash docset/</id>
    <published>2017-02-19T13:20:00.000Z</published>
    <updated>2017-02-19T13:21:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>Dash 是Macos上一款十分方便的API查询工具，支持很多语言。Windows 平台有类似的应用zeal和velocity。</em></p>
<p><em>本文基于<a href="https://kapeli.com/docsets" target="_blank" rel="external">Dash官方文档</a>所写，如有错误欢迎指正。</em></p>
<h2 id="从其他文档格式转换"><a href="#从其他文档格式转换" class="headerlink" title="从其他文档格式转换"></a>从其他文档格式转换</h2><p>Docset 支持从其他标准文档格式转换。</p>
<p>Python 文档(Sphinx、PyDoctor) 可以使用doc2dash模块转换。另外还需用到sphinx模块。两个模块均使用pip安装。</p>
<p>由于直接转换格式比较容易，在此就不细说，具体步骤可以参考官方文档。</p>
<h2 id="从HTML-中提取转换"><a href="#从HTML-中提取转换" class="headerlink" title="从HTML 中提取转换"></a>从HTML 中提取转换</h2><p>有些文档只有HTML 版本，比如笔者需要的PyQt4的本地文档。由于HTML文档没有统一的格式，要从HTML转换到Docset需要自己写程序。</p>
<p>根据官方的步骤：</p>
<h3 id="创建Docset-文件夹"><a href="#创建Docset-文件夹" class="headerlink" title="创建Docset 文件夹"></a>创建Docset 文件夹</h3><p>Mac下使用官方提供的命令创建：<br><code>mkdir -p &lt;docset name&gt;.docset/Contents/Resources/Documents/</code></p>
<p>Windows 下直接新建这几级文件夹，最顶层文件夹名最后要加上.docset</p>
<h3 id="将HTML-文档放入文件夹下"><a href="#将HTML-文档放入文件夹下" class="headerlink" title="将HTML 文档放入文件夹下"></a>将HTML 文档放入文件夹下</h3><p>第二步是把本地的HTML文档放入刚刚创建的 <code>&lt;docset name&gt;.docset/Contents/Resources/Documents/</code> 文件夹下。</p>
<p>这里要提到一点，Dash右侧显示文档的部分基本上就是个HTML阅读器，所以我们需要把HTML文档放到文件夹里供Dash显示。但光有显示的文档还不够，Dash最好用的功能的是直接搜索方法名等并点击跳转到对应的文档位置。接下来我们需要去处理搜索部分。</p>
<h3 id="创建一个Info-plist-文件"><a href="#创建一个Info-plist-文件" class="headerlink" title="创建一个Info.plist 文件"></a>创建一个Info.plist 文件</h3><p>下载<a href="https://kapeli.com/resources/Info.plist" target="_blank" rel="external">Info.plist</a>，并根据你自己的意愿修改里面的内容。具体项代表什么这里就不多解释。修改好之后将Info.plist文件放入<code>&lt;docset name&gt;.docset/Contents/</code>文件夹内。</p>
<h3 id="创建SQLite-索引"><a href="#创建SQLite-索引" class="headerlink" title="创建SQLite 索引"></a>创建SQLite 索引</h3><p>Docset的查询索引使用SQLite存储。我们需要在<code>&lt;docset name&gt;.docset/Contents/Resources/</code>内创建一个数据库文件<code>docSet.dsidx</code>。创建表的SQL命令如下：</p>
<p><code>CREATE TABLE searchIndex(id INTEGER PRIMARY KEY, name TEXT, type TEXT, path TEXT);</code></p>
<h3 id="写入索引数据"><a href="#写入索引数据" class="headerlink" title="写入索引数据"></a>写入索引数据</h3><p>终于到最后一步，写入索引到数据库中。只要把这三个值：值(name)，类型(type)，路径(path)存储到数据库中，Dash就可以搜索到这个项。比如我想在Dash中直接搜索到PyQt4中QLineEdit类的isReadOnly()方法，我需要添加如下三个值：</p>
<ul>
<li>name: isReadOnly</li>
<li>type: Method</li>
<li>path: qlineedit.html#isReadOnly</li>
</ul>
<p>name对应的是在Dash左侧搜索到的项名。type则是Dash内置的项类型，在Dash界面对应的是搜索项名时名称前面的字母图标，Method的图标就是一个M。Dash内置的所有类型可以在<a href="https://kapeli.com/docsets#supportedentrytypes" target="_blank" rel="external">这里</a>找到。你想把这项显示成什么类型就填对应的字符串。最后一个值path，对应的是此项在HTML文档中的路径。</p>
<p>之后就是用你熟悉的语言在HTML文档中找到这些值，然后写入到数据库中。写入语句为：</p>
<p><code>INSERT OR IGNORE INTO searchIndex(name, type, path) VALUES (&#39;name&#39;, &#39;type&#39;, &#39;path&#39;);</code></p>
<p><a href="https://github.com/chroming/html2docset" target="_blank" rel="external">这里</a>是我写的把PyQt4 的HTML文档转换成Docset的Python程序，可供参考。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;Dash 是Macos上一款十分方便的API查询工具，支持很多语言。Windows 平台有类似的应用zeal和velocity。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;本文基于&lt;a href=&quot;https://kapeli.com/docsets&quot; target=&quot;_bl
    
    </summary>
    
      <category term="编程语言" scheme="sikaixing.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="sikaixing.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/"/>
    
    
      <category term="Python" scheme="sikaixing.com/tags/Python/"/>
    
      <category term="文档" scheme="sikaixing.com/tags/%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>PyQt4 解决主界面阻塞导致状态栏无法刷新的问题</title>
    <link href="sikaixing.com/2016/12/20/PyQt4_gui_blocked/"/>
    <id>sikaixing.com/2016/12/20/PyQt4_gui_blocked/</id>
    <published>2016-12-20T06:55:00.000Z</published>
    <updated>2016-12-20T06:57:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>近期写的程序中有个访问网页的操作，比较耗时，于是准备给它加上个状态栏用于提醒当前后台进行到哪一步了。</em></p>
<h2 id="多线程方式"><a href="#多线程方式" class="headerlink" title="多线程方式"></a>多线程方式</h2><p>之前写的程序也有这个需求，当时用多线程解决的。写法如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SetLabelText</span><span class="params">(QThread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, label, message, parent=None)</span>:</span></div><div class="line">        super(SetLabelText, self).__init__(parent)</div><div class="line">        self.lable = label</div><div class="line">        self.message = message</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></div><div class="line">        self.exiting = <span class="keyword">True</span></div><div class="line">        self.wait()</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        self.lable.setText(<span class="string">u"%s"</span> % self.message)</div></pre></td></tr></table></figure>
<p>另外在主程序中比较耗时的部分添加了调用语句：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">self.m1 = SetLabel(self.status_label, <span class="string">u"提醒"</span>)</div><div class="line">self.m1.start()</div></pre></td></tr></table></figure>
<h2 id="更简单的方式"><a href="#更简单的方式" class="headerlink" title="更简单的方式"></a>更简单的方式</h2><p>多线程虽然看起来是解决问题了，但在面对一个方法中多次修改状态栏内容时还需要更多处理步骤才能完美解决所有问题，这样显得有些大材小用了。在查找资料的过程中发现了更简单的解决问题的方法，就是在主程序中直接写上提醒语句，另外还要加上一行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">self.status_label.setText(u&quot;正在读取配置……请稍候……&quot;)</div><div class="line">QCoreApplication.processEvents()</div></pre></td></tr></table></figure>
<p>参考资料：</p>
<blockquote>
<p>《<a href="https://my.oschina.net/u/200628/blog/187865" target="_blank" rel="external">正确使用Qt多线程</a>》</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;近期写的程序中有个访问网页的操作，比较耗时，于是准备给它加上个状态栏用于提醒当前后台进行到哪一步了。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;多线程方式&quot;&gt;&lt;a href=&quot;#多线程方式&quot; class=&quot;headerlink&quot; title=&quot;多线程方式&quot;&gt;&lt;/a&gt;多线程方
    
    </summary>
    
      <category term="编程语言" scheme="sikaixing.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="sikaixing.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/"/>
    
    
      <category term="Python" scheme="sikaixing.com/tags/Python/"/>
    
      <category term="PyQt" scheme="sikaixing.com/tags/PyQt/"/>
    
  </entry>
  
  <entry>
    <title>Python 的列表推导式、字典推导式</title>
    <link href="sikaixing.com/2016/12/18/Python_%20comprehensions/"/>
    <id>sikaixing.com/2016/12/18/Python_ comprehensions/</id>
    <published>2016-12-18T10:41:00.000Z</published>
    <updated>2016-12-18T10:45:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h2><p>列表解析是用一行代码实现根据一个列表生成另一个列表的写法。</p>
<h3 id="基本写法"><a href="#基本写法" class="headerlink" title="基本写法"></a>基本写法</h3><p>要实现从一个列表中获取满足条件的某些元素组成新的列表：</p>
<p><code>[x for x in [1,2,3,4] if x % 2 == 0]</code></p>
<p>这行代码输出是 <code>[2, 4]</code>。如果没有 if 的话就是直接复制整个列表。</p>
<h3 id="其他用法"><a href="#其他用法" class="headerlink" title="其他用法"></a>其他用法</h3><p>修改新列表的元素：</p>
<p><code>[x/2 for x in [1,2,3,4]]</code></p>
<p>将单个元素的列表重复此元素，扩展为指定长度的列表：</p>
<p><code>[x for i in range(100)]</code></p>
<p>提取嵌套列表中元素的第一项：</p>
<p><code>[x[0] for x in [[1,2], [3,4], [5,6]]]</code></p>
<p>嵌套循环的写法：</p>
<p><code>[n for row in [[1,2], [3,4], [5,6]] for n in row]</code></p>
<p>生成嵌套列表：</p>
<p><code>[(x,x+10) for x in [1,2]</code></p>
<p>多个参数：<br><code>[(x,y) for x,y in {1:2, 4:5}.items() if x % 2 == 0]</code></p>
<p>与条件表达式结合：<br><code>[x if x % 3 == 0 else 1 for x in range(10)]</code></p>
<p><code>[(x,y) if x % 2 == 0 else (y, 3) for x,y in {1:2, 4:5}.items() ]</code></p>
<h2 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h2><p>与列表推导式类似，字典也有相应的推导式写法。</p>
<h3 id="基本写法-1"><a href="#基本写法-1" class="headerlink" title="基本写法"></a>基本写法</h3><p><code>{x:y for y,x in {&#39;1&#39;:&#39;2&#39;, &#39;3&#39;:&#39;4&#39;}.items() if &#39;1&#39; in y}</code></p>
<p>参考资料：</p>
<blockquote>
<p><a href="http://codingpy.com/article/python-list-comprehensions-explained-visually/" target="_blank" rel="external">《轻松学会Python列表解析式》</a><br><a href="http://www.shoucewang.com/python-senior/list-comprehensions.html" target="_blank" rel="external">《字典推导式》</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;列表推导式&quot;&gt;&lt;a href=&quot;#列表推导式&quot; class=&quot;headerlink&quot; title=&quot;列表推导式&quot;&gt;&lt;/a&gt;列表推导式&lt;/h2&gt;&lt;p&gt;列表解析是用一行代码实现根据一个列表生成另一个列表的写法。&lt;/p&gt;
&lt;h3 id=&quot;基本写法&quot;&gt;&lt;a href=&quot;#
    
    </summary>
    
      <category term="编程语言" scheme="sikaixing.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="sikaixing.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/"/>
    
    
      <category term="Python" scheme="sikaixing.com/tags/Python/"/>
    
      <category term="Python 技巧" scheme="sikaixing.com/tags/Python-%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Python list 替换项、dict及 orderDict替换 key 的方式</title>
    <link href="sikaixing.com/2016/12/18/ordereddict_replace_key/"/>
    <id>sikaixing.com/2016/12/18/ordereddict_replace_key/</id>
    <published>2016-12-18T10:36:00.000Z</published>
    <updated>2016-12-29T07:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="list-替换项"><a href="#list-替换项" class="headerlink" title="list 替换项"></a>list 替换项</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">index = list.index(value)</div><div class="line">list[index] = new_value</div></pre></td></tr></table></figure>
<h2 id="dict-替换-key"><a href="#dict-替换-key" class="headerlink" title="dict 替换 key"></a>dict 替换 key</h2><p>dict的 pop()方法可以删除一个 item，之后再添加一个新的 item即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dict[new_key] = item[old_key]</div><div class="line">dict.pop[old_key]</div></pre></td></tr></table></figure>
<p>还有更简答的写法：</p>
<p><code>dict[new_key] = dict.pop(old_key)</code></p>
<p>不过 pop()方法是删除并返回该 item。如果不需要返回还可以使用 del：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dict[new_key] = item[old_key]</div><div class="line">del dict[old_key]</div></pre></td></tr></table></figure></p>
<p>注意：<br>如果是在循环中替换 key 会将新 key 引入循环，导致重复处理。解决方法是在循环前深拷贝 dict.keys()，循环此 list。</p>
<h2 id="orderedDict-替换-key"><a href="#orderedDict-替换-key" class="headerlink" title="orderedDict 替换 key"></a>orderedDict 替换 key</h2><p>orderedDict 是python 内置的有序 dict 类。</p>
<p>直接套用 dict 的 <code>dict[new_key] = dict.pop(old_key)</code> 方法替换 key 会导致orderedDict顺序改变。 解决方法是重新建立一个orderedDict：</p>
<p><code>new_order = OrderedDict([(&#39;__C__&#39;, v) if k == &#39;c&#39; else (k, v) for k, v in old_order.items()])</code></p>
<p>参考资料：</p>
<blockquote>
<p> <a href="http://stackoverflow.com/questions/12150872/change-key-in-ordereddict-without-loosing-order" target="_blank" rel="external">《change key in OrderedDict without loosing order》</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;list-替换项&quot;&gt;&lt;a href=&quot;#list-替换项&quot; class=&quot;headerlink&quot; title=&quot;list 替换项&quot;&gt;&lt;/a&gt;list 替换项&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
    
    </summary>
    
      <category term="编程语言" scheme="sikaixing.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="sikaixing.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/"/>
    
    
      <category term="Python" scheme="sikaixing.com/tags/Python/"/>
    
      <category term="Python 技巧" scheme="sikaixing.com/tags/Python-%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>PyQt4 中获取QListWidget 及 QTreeWidget 所有item的方式</title>
    <link href="sikaixing.com/2016/11/01/PyQt4_get_all_item/"/>
    <id>sikaixing.com/2016/11/01/PyQt4_get_all_item/</id>
    <published>2016-11-01T06:18:00.000Z</published>
    <updated>2016-12-20T10:43:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>PyQt4 的 QListWidget 和 QTreeWidget 中都没有现成的获取所有item的方法。在网上找到了比较简单的获取方式：</p>
<p><em>QListWidget:</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">for i in range(0, listwidget.count()):</div><div class="line">	item = listwidget.item(i)</div></pre></td></tr></table></figure>
<p><em>QTreeWidget:</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">def tree_items(self, tree):</div><div class="line">    it = QTreeWidgetItemIterator(tree)</div><div class="line">    while it.value():</div><div class="line">        yield it.value()</div><div class="line">        it += 1</div></pre></td></tr></table></figure>
<p>参考资料:</p>
<ol>
<li>《<a href="http://stackoverflow.com/questions/12222594/how-can-i-iterate-through-qlistwidget-items-and-work-with-each-item" target="_blank" rel="external">How can i iterate through QListWidget items and work with each item?</a>》</li>
<li>《<a href="http://icefire.iteye.com/blog/875076" target="_blank" rel="external">yield的应用——QTreeWidgetItem的迭代</a>》</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PyQt4 的 QListWidget 和 QTreeWidget 中都没有现成的获取所有item的方法。在网上找到了比较简单的获取方式：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;QListWidget:&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;t
    
    </summary>
    
      <category term="编程语言" scheme="sikaixing.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="sikaixing.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/"/>
    
    
      <category term="Python" scheme="sikaixing.com/tags/Python/"/>
    
      <category term="PyQt" scheme="sikaixing.com/tags/PyQt/"/>
    
  </entry>
  
  <entry>
    <title>国内常用的 iOS 应用 URL Schemes 列表</title>
    <link href="sikaixing.com/2016/10/15/ios_url_schemes/"/>
    <id>sikaixing.com/2016/10/15/ios_url_schemes/</id>
    <published>2016-10-15T10:42:26.000Z</published>
    <updated>2016-11-13T11:42:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>经常用到 URL Schemes，发现网上还没有比较完整的对于国内常用 App的 URL Schemes，故整理此文。内容基本收集自网络，如有侵权烦请告知。</em></p>
<h2 id="iOS10-系统内置"><a href="#iOS10-系统内置" class="headerlink" title="iOS10 系统内置"></a>iOS10 系统内置</h2><p>此部分内容来源于此页面：<br><a href="https://github.com/cyanzhong/app-tutorials/blob/master/schemes.md" target="_blank" rel="external">https://github.com/cyanzhong/app-tutorials/blob/master/schemes.md</a></p>
<ul>
<li><code>电池电量</code> Prefs:root=BATTERY_USAGE</li>
<li><code>通用设置</code> Prefs:root=General</li>
<li><code>存储空间</code> Prefs:root=General&amp;path=STORAGE_ICLOUD_USAGE/DEVICE_STORAGE</li>
<li><code>蜂窝数据</code> Prefs:root=MOBILE_DATA_SETTINGS_ID</li>
<li><code>Wi-Fi 设置</code> Prefs:root=WIFI</li>
<li><code>蓝牙设置</code> Prefs:root=Bluetooth</li>
<li><code>定位设置</code> Prefs:root=Privacy&amp;path=LOCATION</li>
<li><code>辅助功能</code> Prefs:root=General&amp;path=ACCESSIBILITY</li>
<li><code>关于手机</code> Prefs:root=General&amp;path=About</li>
<li><code>键盘设置</code> Prefs:root=General&amp;path=Keyboard</li>
<li><code>显示设置</code> Prefs:root=DISPLAY</li>
<li><code>声音设置</code> Prefs:root=Sounds</li>
<li><code>App Store 设置</code> Prefs:root=STORE</li>
<li><code>墙纸设置</code> Prefs:root=Wallpaper</li>
<li><code>打开电话</code> Mobilephone://</li>
<li><code>世界时钟</code> Clock-worldclock://</li>
<li><code>闹钟</code> Clock-alarm://</li>
<li><code>秒表</code> Clock-stopwatch://</li>
<li><code>倒计时</code> Clock-timer://</li>
<li><code>打开相册</code> Photos://</li>
</ul>
<h2 id="微信"><a href="#微信" class="headerlink" title="微信"></a>微信</h2><ul>
<li><code>扫一扫</code> weixin://scanqrcode</li>
<li><code>朋友圈</code> weixin://dl/moments</li>
<li><code>收藏</code> weixin://dl/favorites</li>
<li><code>我的二维码</code> weixin://dl/myQRcode</li>
</ul>
<h2 id="支付宝"><a href="#支付宝" class="headerlink" title="支付宝"></a>支付宝</h2><ul>
<li><code>扫一扫</code> alipayqr://platformapi/startapp?saId=10000007</li>
<li><code>付款码</code> alipayqr://platformapi/startapp?saId=20000056</li>
<li><code>红包</code> alipay://platformapi/startapp?saId=88886666</li>
<li><code>发起聊天</code> alipay://platformapi/startapp?appId=20000254&amp;actionType=createGroup</li>
</ul>
<h2 id="淘宝"><a href="#淘宝" class="headerlink" title="淘宝"></a>淘宝</h2><ul>
<li><code>打开</code> taobao://</li>
<li><code>搜索</code> taobao://s.taobao.com/?q=</li>
</ul>
<h2 id="Moke-微博客户端"><a href="#Moke-微博客户端" class="headerlink" title="Moke 微博客户端"></a>Moke 微博客户端</h2><p>此部分内容来源于官方帮助文档：<br><a href="https://moke.com/moke/url\_schemes.html" target="_blank" rel="external">https://moke.com/moke/url\_schemes.html</a></p>
<ul>
<li><code>打开</code> moke:///</li>
<li><code>查看微博</code> moke:///link?url=微博正文页面链接</li>
<li><code>查看用户</code> moke:///link?url=用户主页链接</li>
<li><code>搜索微博</code> moke:///search/statuses?query=关键字</li>
<li><code>搜索用户</code> moke:///search/users?query=关键字</li>
<li><code>发微博</code> moke://账号昵称或ID(缺省使用当前账号)/post?text=微博内容</li>
</ul>
<h2 id="微博官方客户端"><a href="#微博官方客户端" class="headerlink" title="微博官方客户端"></a>微博官方客户端</h2><ul>
<li><code>打开</code> sinaweibo://</li>
<li><code>扫码</code> sinaweibo://qrcode</li>
</ul>
<h2 id="知乎客户端"><a href="#知乎客户端" class="headerlink" title="知乎客户端"></a>知乎客户端</h2><ul>
<li><code>打开</code> zhihu:</li>
<li><code>问题页面</code> zhihu://questions/id</li>
<li><code>回答</code> zhihu://answers/id</li>
<li><code>用户页</code> zhihu://people/id</li>
</ul>
<p>参考资料：</p>
<blockquote>
<p><a href="https://github.com/cyanzhong/app-tutorials/blob/master/schemes.md" target="_blank" rel="external">《app-tutorials/schemes.md》</a><br><a href="https://github.com/paicha/url-schemes-collecting" target="_blank" rel="external">《收集各类 App 的 URL schemes》</a><br><a href="https://moke.com/moke/url\_schemes.html" target="_blank" rel="external">《Moke 官方帮助手册》</a><br><a href="https://www.zhihu.com/question/19907735" target="_blank" rel="external">《你所知道好玩有趣的 iOS URL schemes 有哪些？》</a><br><a href="http://sspai.com/31500" target="_blank" rel="external">《URL Schemes 使用详解》</a><br><a href="https://www.zhihu.com/question/27883599" target="_blank" rel="external">《iOS 知乎客户端的 url scheme 支持哪些参数？》</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;经常用到 URL Schemes，发现网上还没有比较完整的对于国内常用 App的 URL Schemes，故整理此文。内容基本收集自网络，如有侵权烦请告知。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;iOS10-系统内置&quot;&gt;&lt;a href=&quot;#iOS10-系统内置&quot; cla
    
    </summary>
    
      <category term="日常问题" scheme="sikaixing.com/categories/%E6%97%A5%E5%B8%B8%E9%97%AE%E9%A2%98/"/>
    
      <category term="日常工具" scheme="sikaixing.com/categories/%E6%97%A5%E5%B8%B8%E9%97%AE%E9%A2%98/%E6%97%A5%E5%B8%B8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="iOS" scheme="sikaixing.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Python 风格指南（Google Python Style Guide系列 ）阅读笔记</title>
    <link href="sikaixing.com/2016/09/26/Google_Python_Style_Guide/"/>
    <id>sikaixing.com/2016/09/26/Google_Python_Style_Guide/</id>
    <published>2016-09-26T13:06:00.000Z</published>
    <updated>2016-10-26T03:37:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>主要记录个人在阅读《Python 风格指南》时觉得可能会用到的一些建议。</p>
<h2 id="风格规范"><a href="#风格规范" class="headerlink" title="风格规范"></a>风格规范</h2><ol>
<li>不要在行尾加分号, 也不要用分号将两条命令放在同一行；</li>
<li>每行不超过80个字符, 如果要连接超过80字符的行，用额外的圆括号将其隐式地连接起来；</li>
<li>顶级定义（函数或者类定义）之间空两行, 方法定义之间空一行；</li>
<li>文档字符串：文档字符串即包，模块，类或函数中作为注释文档的语句。通常以三重双引号”””包围，格式：首行为概述，接着空一行，下面是详细文档。其中：模块的文档字符串需包含许可样版；函数和方法的文档字符串应包含args，returns，raises；类的文档字符串应包含类的说明及公共属性attributes的说明；</li>
<li>注释应以#开头（包含多行注释），且注释应离开代码两个空格。技巧性部分或复杂部分需注释，但不要描述代码，假设看代码的人比你更懂Python；</li>
<li>如果类不继承其他类，则显式集成object类；</li>
<li>避免在循环中使用+来累加字符串。如果有需要，用list.append来替代；</li>
<li>为临时代码使用TODO注释；</li>
<li>即使是打算作为脚本的文件也应该是可导入的，且导入时不应导致脚本主程序运行，应将主功能放在main()中。</li>
<li>命名：module_name, package_name, ClassName, method_name, ExceptionName, function_name, GLOBAL_VAR_NAME, instance_var_name, function_parameter_name, local_var_name.</li>
</ol>
<p>参考资料：</p>
<blockquote>
<p><a href="http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_language_rules/" target="_blank" rel="external">《Python语言规范》</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要记录个人在阅读《Python 风格指南》时觉得可能会用到的一些建议。&lt;/p&gt;
&lt;h2 id=&quot;风格规范&quot;&gt;&lt;a href=&quot;#风格规范&quot; class=&quot;headerlink&quot; title=&quot;风格规范&quot;&gt;&lt;/a&gt;风格规范&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;不要在行尾加分号, 也不
    
    </summary>
    
      <category term="编程语言" scheme="sikaixing.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="sikaixing.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/"/>
    
    
      <category term="基础知识" scheme="sikaixing.com/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Windows 10 循环蓝屏重启 system thread exception not handled 的一种解决办法</title>
    <link href="sikaixing.com/2016/09/18/Windows_10_system%20thread_exception_not_handled/"/>
    <id>sikaixing.com/2016/09/18/Windows_10_system thread_exception_not_handled/</id>
    <published>2016-09-18T06:00:00.000Z</published>
    <updated>2016-10-26T03:42:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>近期自己的老笔记本在打开一个游戏一段时间后突然蓝屏并无限循环重启，屏幕显示错误提示为：system thread exception not handled。在试了一些常见方法未果后差不多准备重装系统时，偶然看到一个帖子：<a href="http://answers.microsoft.com/zh-hans/windows/forum/windows_10-performance/win10/2c730d1a-9e1d-4da1-a11b-5659df6169ec?auth=1" target="_blank" rel="external">http://answers.microsoft.com/zh-hans/windows/forum/windows_10-performance/win10/2c730d1a-9e1d-4da1-a11b-5659df6169ec?auth=1</a></p>
<p>此帖提问者回复说拆卸电池后问题解决，笔者也试着将自己的笔记本电池拆下并断电后，再开机，果然解决了问题。也就是说解决办法是给电脑断电，由于笔记本有电池，要彻底断电需要将电池取下才可以。</p>
<p>这个问题具体原因官方也没说清楚，姑且认为是系统BUG吧。</p>
<p>参考资料：</p>
<blockquote>
<p><a href="http://answers.microsoft.com/zh-hans/windows/forum/windows_10-performance/win10/2c730d1a-9e1d-4da1-a11b-5659df6169ec?auth=1" target="_blank" rel="external">《Win10 无限蓝屏重启 显示 system thread exception not handled》</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近期自己的老笔记本在打开一个游戏一段时间后突然蓝屏并无限循环重启，屏幕显示错误提示为：system thread exception not handled。在试了一些常见方法未果后差不多准备重装系统时，偶然看到一个帖子：&lt;a href=&quot;http://answers.mi
    
    </summary>
    
      <category term="日常问题" scheme="sikaixing.com/categories/%E6%97%A5%E5%B8%B8%E9%97%AE%E9%A2%98/"/>
    
      <category term="日常问题" scheme="sikaixing.com/categories/%E6%97%A5%E5%B8%B8%E9%97%AE%E9%A2%98/%E6%97%A5%E5%B8%B8%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="硬件" scheme="sikaixing.com/tags/%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>我的电脑必装软件 -- macOS 篇</title>
    <link href="sikaixing.com/2016/09/18/installed_software_macos/"/>
    <id>sikaixing.com/2016/09/18/installed_software_macos/</id>
    <published>2016-09-18T02:34:00.000Z</published>
    <updated>2017-02-13T05:50:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MAS-软件"><a href="#MAS-软件" class="headerlink" title="MAS 软件"></a>MAS 软件</h2><ol>
<li>QQ</li>
<li>WeChat</li>
<li>为知笔记</li>
<li>Dash</li>
<li>PopClip</li>
<li>Money Pro</li>
<li>Amphetamine</li>
<li>MWeb</li>
<li>Tweetbot for Twitter</li>
<li>Reeder 3</li>
<li>Paste</li>
<li>Telegram</li>
<li>Notability</li>
<li>PDF Expert 2</li>
<li>HazeOver</li>
</ol>
<h2 id="官网下载"><a href="#官网下载" class="headerlink" title="官网下载"></a>官网下载</h2><ol>
<li>Pycharm</li>
<li>Alfred</li>
<li>MacPaw Hider 2</li>
<li>Surge</li>
<li>1Password 6</li>
<li>Typora</li>
<li>Sublime Text</li>
<li>chrome</li>
<li>Firefox</li>
<li>Boom 2</li>
<li>mpv</li>
<li>Pastebot</li>
<li>坚果云</li>
<li>MacID</li>
<li>Wireshark</li>
<li>Homebrew</li>
<li>Lepton</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;MAS-软件&quot;&gt;&lt;a href=&quot;#MAS-软件&quot; class=&quot;headerlink&quot; title=&quot;MAS 软件&quot;&gt;&lt;/a&gt;MAS 软件&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;QQ&lt;/li&gt;
&lt;li&gt;WeChat&lt;/li&gt;
&lt;li&gt;为知笔记&lt;/li&gt;
&lt;li&gt;Dash&lt;/
    
    </summary>
    
      <category term="日常问题" scheme="sikaixing.com/categories/%E6%97%A5%E5%B8%B8%E9%97%AE%E9%A2%98/"/>
    
      <category term="日常工具" scheme="sikaixing.com/categories/%E6%97%A5%E5%B8%B8%E9%97%AE%E9%A2%98/%E6%97%A5%E5%B8%B8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="软件" scheme="sikaixing.com/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>我的电脑必装软件--Windows 篇</title>
    <link href="sikaixing.com/2016/09/17/installed_software_windows/"/>
    <id>sikaixing.com/2016/09/17/installed_software_windows/</id>
    <published>2016-09-16T16:59:00.000Z</published>
    <updated>2017-02-13T05:50:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="日常软件"><a href="#日常软件" class="headerlink" title="日常软件"></a>日常软件</h2><ol>
<li>腾讯QQ轻聊版</li>
<li>微信</li>
<li>迅雷(备选：迅雷精简版)</li>
<li>chrome</li>
<li>7-zip(备选：winrar免费版)</li>
<li>Internet Download Manager(备选：EagleGet)</li>
<li>Everything</li>
<li>Listary(备选：Wox)</li>
<li>百度输入法</li>
<li>Typora</li>
<li>potplayer</li>
<li>SumatraPDF(备选：福昕阅读器)</li>
<li>Notepad ++</li>
<li>Microsoft Office 365</li>
<li>为知笔记</li>
<li>snipaste</li>
<li>flux</li>
</ol>
<h2 id="开发相关"><a href="#开发相关" class="headerlink" title="开发相关"></a>开发相关</h2><ol>
<li>Pycharm</li>
<li>Python2 环境</li>
<li>ipython</li>
<li>Sublime Text</li>
<li>putty(备选：xshell)</li>
<li>Fiddler</li>
<li>Wireshark</li>
<li>zeal(备选：velocity)</li>
<li>Github客户端</li>
<li>Lepton</li>
<li><p>Firefox</p>
<p>​</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;日常软件&quot;&gt;&lt;a href=&quot;#日常软件&quot; class=&quot;headerlink&quot; title=&quot;日常软件&quot;&gt;&lt;/a&gt;日常软件&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;腾讯QQ轻聊版&lt;/li&gt;
&lt;li&gt;微信&lt;/li&gt;
&lt;li&gt;迅雷(备选：迅雷精简版)&lt;/li&gt;
&lt;li&gt;chrom
    
    </summary>
    
      <category term="日常问题" scheme="sikaixing.com/categories/%E6%97%A5%E5%B8%B8%E9%97%AE%E9%A2%98/"/>
    
      <category term="日常工具" scheme="sikaixing.com/categories/%E6%97%A5%E5%B8%B8%E9%97%AE%E9%A2%98/%E6%97%A5%E5%B8%B8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="软件" scheme="sikaixing.com/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>QLineEdit实现点击全选文本</title>
    <link href="sikaixing.com/2016/08/05/QLineEdit_click/"/>
    <id>sikaixing.com/2016/08/05/QLineEdit_click/</id>
    <published>2016-08-05T09:34:10.000Z</published>
    <updated>2016-12-20T06:46:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近收到一个需求：希望实现点击一个QLineEdit全文其中的文本。QLineEdit没有点击信号，要实现这个功能需要自己写方法。</p>
<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>最近写的软件包含一个简单的网页浏览器的部分，其中地址栏用的标准QLineEdit。另外界面文件是用Qt Designer画的，代码中直接引用UI文件。这样修改界面比较直观。</p>
<p>现在有个需求，希望点击地址栏的QLineEdit时直接全选地址，效果类似chrome浏览器地址栏的点击效果。</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>翻了一下QLineEdit的自带信号，并没有单击的信号。</p>
<p>网上搜索了一下，基本上都是说要重写QLineEdit的方法。但是由于我的界面.ui文件，要重写方法只能先把.ui转换成.py。</p>
<p>转换方法：</p>
<p><code>pyuic4 -i 0 MyWindow.ui -o MyWindow.py</code></p>
<p>在安装pyqt4之后命令行中就能使用<code>pyuic4</code>命令。具体参数的含义这里暂时不深究。</p>
<p> 转换之后需要在源码中引用新生成的py文件。将之前的引用ui文件的代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PyQt4.uic <span class="keyword">import</span> loadUiType </div><div class="line"></div><div class="line">qtCreatorFile = <span class="string">"MyWindow.ui"</span></div><div class="line"></div><div class="line">Ui_MainWindow, QtBaseClass = loadUiType(qtCreatorFile)</div></pre></td></tr></table></figure>
<p>修改为：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> MyWindow <span class="keyword">import</span> Ui_MainWindow</div></pre></td></tr></table></figure>
<p>之后就是重写QLineEdit类了。这里有个问题：QLineEdit有两个相关的方法可以被重写：<code>mousePressEvent()</code> ， <code>focusInEvent()</code> 。一开始笔者重写了<code>focusInEvent ()</code>:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">focusInEvent</span><span class="params">(self, event)</span>:</span></div><div class="line">    self.setText(<span class="string">"www"</span>)</div><div class="line">    self.selectAll()</div></pre></td></tr></table></figure>
<p>但测试时发现<code>setText()</code>有效果，但<code>selectAll()</code>没有效果。搜索之后发现如下回答：</p>
<p><em>With <code>focusInEvent</code>, when you click the widget, it gets executed, but since you click, it removes the selected text.</em></p>
<p>也就是<code>focusInEvent()</code> 会自动移除选中效果。换成重写 <code>mousePressEvent()</code>后即可正常实现。</p>
<h2 id="更好的办法"><a href="#更好的办法" class="headerlink" title="更好的办法"></a>更好的办法</h2><p>在之前的问题回答下不仅回答了重写<code>mousePressEvent()</code> ，还提供了另一个更方便的解决方式：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">txt_demo = QtGui.QLineEdit()</div><div class="line">txt_demo.mousePressEvent = <span class="keyword">lambda</span> _ : txt_demo.selectAll()</div></pre></td></tr></table></figure>
<p>即使用匿名函数重写实例的方法，这样不需要修改类。</p>
<p>后来搜索了一下，这种写法算给实例动态添加方法。</p>
<p>参考资料：</p>
<blockquote>
<ol>
<li>《<a href="http://richardustc.github.io/2015-07-06-create-PyQt-Program-with-Designer.html" target="_blank" rel="external">使用Designer编写PyQt程序的简单流程</a>》</li>
<li>《<a href="http://stackoverflow.com/questions/23076698/pyside-select-all-text-when-qlineedit-gets-focus" target="_blank" rel="external">Pyside - Select all text when QLineEdit gets focus</a>》</li>
</ol>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近收到一个需求：希望实现点击一个QLineEdit全文其中的文本。QLineEdit没有点击信号，要实现这个功能需要自己写方法。&lt;/p&gt;
&lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;
    
    </summary>
    
      <category term="编程语言" scheme="sikaixing.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="sikaixing.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/"/>
    
    
      <category term="Python" scheme="sikaixing.com/tags/Python/"/>
    
      <category term="PyQt" scheme="sikaixing.com/tags/PyQt/"/>
    
  </entry>
  
  <entry>
    <title>Python 程序扩展名（py, pyc, pyw, pyo, pyd）及发布程序时的选择</title>
    <link href="sikaixing.com/2016/08/03/Python_pyc/"/>
    <id>sikaixing.com/2016/08/03/Python_pyc/</id>
    <published>2016-08-03T02:25:26.000Z</published>
    <updated>2016-11-04T06:36:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="扩展名"><a href="#扩展名" class="headerlink" title="扩展名"></a>扩展名</h2><p>Python程序中常见的扩展名是py, pyc，其实还有其他几种扩展名。下面是几种扩展名的用法。</p>
<h3 id="py"><a href="#py" class="headerlink" title="py"></a>py</h3><p>py就是最基本的源码扩展名。windows下直接双击运行会调用python.exe执行。</p>
<h3 id="pyw"><a href="#pyw" class="headerlink" title="pyw"></a>pyw</h3><p>pyw是另一种源码扩展名，跟py唯一的区别是在windows下双击pyw扩展名的源码会调用pythonw.exe执行源码，这种执行方式不会有命令行窗口。主要用于GUI程序发布时不需要看到控制台信息的情况。</p>
<h3 id="pyc"><a href="#pyc" class="headerlink" title="pyc"></a>pyc</h3><p>在执行python代码时经常会看到同目录下自动生成同名的pyc文件。这是python源码编译后的字节码，一般会在代码执行时自动生成你代码中引用的py文件的pyc文件。这个文件可以直接执行，用文本编辑器打开也看不到源码。</p>
<h3 id="pyo"><a href="#pyo" class="headerlink" title="pyo"></a>pyo</h3><p>pyo是跟pyc类似的优化编码后的文件。</p>
<h3 id="pyd"><a href="#pyd" class="headerlink" title="pyd"></a>pyd</h3><p>pyd并非从python程序生成，而是其他语言写成的可以被python调用的扩展。</p>
<h2 id="程序发布的选择"><a href="#程序发布的选择" class="headerlink" title="程序发布的选择"></a>程序发布的选择</h2><p>由于笔者基本只在windows平台下考虑发布问题，其他平台均使用源码，故此处讨论基本围绕windows平台。</p>
<h3 id="打包为正常exe程序"><a href="#打包为正常exe程序" class="headerlink" title="打包为正常exe程序"></a>打包为正常exe程序</h3><p>如果要公开发布程序，最常见的方式就是打包成exe程序了。打包的好处是使用者不需要考虑Python的运行环境，且也容易被接受。但不好的是一般打包出来的程序都比较大，而且由于是依靠模块打包，有可能出现兼容性等问题。</p>
<p>笔者常用的打包模块是pyinstaller。常用的打包命令是：</p>
<p><code>pyinstaller -F example.py</code></p>
<p>-F参数可将代码打包成单个exe程序。</p>
<p>另外如果是GUI程序不需要控制台窗口的还可以加上-w参数：</p>
<p><code>pyinstaller -w -F example.py</code></p>
<h3 id="发布编译后的pyc-pyo"><a href="#发布编译后的pyc-pyo" class="headerlink" title="发布编译后的pyc/pyo"></a>发布编译后的pyc/pyo</h3><p>如果使用者有python环境，又不想让他们看到源码，就可以选择发布pyc/pyo文件。</p>
<p>直接执行的py文件不会自动生成pyc，需要手动编译一下。单文件编译：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> py_compile</div><div class="line">py_compile.compile(<span class="string">r'c:\test.py'</span>)</div></pre></td></tr></table></figure>
<p>文件夹编译：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> compileall</div><div class="line">compileall.compile_dir(dirpath)</div></pre></td></tr></table></figure>
<p>编译成pyo：</p>
<p><code>python -O -m py_compile file.py</code></p>
<p>如果是GUI程序不需要控制台窗口，可以新建一个pyw文件用于调用主pyc程序。pyw中只需要导入pyc程序即可。</p>
<h3 id="发布源码py"><a href="#发布源码py" class="headerlink" title="发布源码py"></a>发布源码py</h3><p>发布源码一般是开源项目使用的，没什么需要说明的。直接发py文件就可以了，只要对方有环境就可以运行。</p>
<p>参考资料：</p>
<blockquote>
<ol>
<li>《<a href="http://blog.csdn.net/feeltouch/article/details/45952003" target="_blank" rel="external">python 文件 .py .pyc .pyw .pyo .pyd</a>》</li>
<li>《<a href="http://tech.uc.cn/?p=1932" target="_blank" rel="external">Python程序的执行原理</a>》</li>
<li>《<a href="http://gmingzhe.blog.51cto.com/810664/163444" target="_blank" rel="external">python的pyc和pyo文件</a>》</li>
<li>《<a href="https://apfantasy.wordpress.com/2011/02/13/%E8%BF%90%E8%A1%8Cpython%E7%A8%8B%E5%BA%8Fpyc%E9%9A%90%E8%97%8Fdos%E7%AA%97%E5%8F%A3%E7%9A%84%E7%AE%80%E4%BE%BF%E6%96%B9%E6%B3%95/" target="_blank" rel="external">运行Python程序(pyc)隐藏DOS窗口的简便方法</a>》</li>
<li>《<a href="http://blog.csdn.net/sislcb/article/details/4002414" target="_blank" rel="external">py文件编译为pyc</a>》</li>
</ol>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;扩展名&quot;&gt;&lt;a href=&quot;#扩展名&quot; class=&quot;headerlink&quot; title=&quot;扩展名&quot;&gt;&lt;/a&gt;扩展名&lt;/h2&gt;&lt;p&gt;Python程序中常见的扩展名是py, pyc，其实还有其他几种扩展名。下面是几种扩展名的用法。&lt;/p&gt;
&lt;h3 id=&quot;py&quot;&gt;&lt;
    
    </summary>
    
      <category term="编程语言" scheme="sikaixing.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="sikaixing.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/"/>
    
    
      <category term="Python" scheme="sikaixing.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>HTTPS中的对称密钥加密，公开密钥加密，数字证书</title>
    <link href="sikaixing.com/2016/03/27/https_about/"/>
    <id>sikaixing.com/2016/03/27/https_about/</id>
    <published>2016-03-26T16:25:26.000Z</published>
    <updated>2016-10-26T03:41:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="密钥"><a href="#密钥" class="headerlink" title="密钥"></a>密钥</h2><p>我们将未加密的内容称为明文，加密之后的内容称为密文。</p>
<p>简单来说，要加密一段明文，可以将这段内容输入到一个加密函数中，输出密文。但这种简单的加密方式存在被人盗取到加密函数从而破解明文的危险，且加密函数一般构成复杂，一旦被盗取更换成本较高。</p>
<p>于是人们想出了一个办法，在加密函数中再添加一个参数，这个参数只有通信双方知道，没有参数则无法正确解密出明文。这个参数被称为密钥。对于同一个加密函数而言，密钥值的不同则加密方式也不同，得出的密文也就不同。这样加密系统的安全性提高了，被盗取密钥之后更换密钥的成本也低了很多。常见的情景是加密函数都是使用公开的算法，用户需要保存的仅仅是自己的密钥。</p>
<h2 id="对称密钥加密"><a href="#对称密钥加密" class="headerlink" title="对称密钥加密"></a>对称密钥加密</h2><p>对称密钥加密就是加密与解密使用相同的是密钥值。</p>
<p>流行的对称密钥加密包括：</p>
<ul>
<li>DES</li>
<li>TRiple-DES</li>
<li>RC2</li>
<li>RC4</li>
</ul>
<p>对称密钥需要通信双方共享密钥。对互联网通信而言，不同的通信双方需要不同的对称密钥，如果有N个用户需要相互通信，总共需要密钥数N*(N-1)。</p>
<h2 id="公开密钥加密"><a href="#公开密钥加密" class="headerlink" title="公开密钥加密"></a>公开密钥加密</h2><p>对称密钥加密存在需要密钥数太多以及传递密钥不方便的缺点，于是人们研究出非对称的密钥加密技术，即加密和解密的密钥不需要一样。常见的一种称为公开密钥加密。</p>
<p>公开密钥加密将通信一端的加密和解密密钥分成两个，其中加密密钥可以公开发布，也就是随便谁都可以使用该加密密钥为明文加密，但要解密这段密文只能靠该端私有的解密密钥。这解决了对称密钥加密中的缺点。其中公开的加密密钥称为公开密钥，私有的解密密钥称为私有密钥。</p>
<p>要保证公开密钥加密的可用性必须确保以下情况无法计算出私有密钥：</p>
<ul>
<li>有公开密钥；</li>
<li>一段密文；</li>
<li>一段明文和使用公开密钥加密过的密文；</li>
</ul>
<p>流行的公开密钥加密包括：</p>
<ul>
<li>RSA</li>
<li>DH</li>
<li>ECDHE</li>
<li>ECDH</li>
<li>DHE</li>
</ul>
<p>公开密钥加密虽然更加简单安全但其加密算法运算比较慢，所以一般混合使用公开密钥加密和对称密钥加密的使用方式，即先通过公开密钥加密获取到对称密钥加密的密钥，再通过对称密钥加密传输数据。这种情况在后文说明。</p>
<h2 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h2><p>对称密钥加密和公开密钥加密都是将报文加密的技术。但加密能做的不止如此，还可以用加密算法来证明报文是谁编写的以及中途没有被篡改。数字签名就是这种技术。</p>
<p>数字签名是附加在报文上的特殊加密校验码。其使用了私有密钥加密生成校验码，除发送者外其他人都无法重新生成对应的校验码，这样就证明了报文的身份以及中途没有被人篡改过。</p>
<p>数字签名通常通过公开密钥技术产生，但使用方式相反。发送者首先为要签名内容生成报文摘要，使用签名函数并输入私有密钥作为参数，对报文摘要进行加密，生成签名并随报文一起发送出去。接收者通过附加了公开密钥参数的签名函数反函数将签名解密，并与生成的报文摘要进行对比，如果结果一致则代表报文无误。</p>
<p>常见的RSA加密系统可以同时用于公开密钥加密和数字签名。RSA加密系统将解码函数D作为签名函数使用，编码函数E作为解签名函数。</p>
<h2 id="数字证书"><a href="#数字证书" class="headerlink" title="数字证书"></a>数字证书</h2><p>单纯的公开密钥加密只适合对等的两端通信，对于常用的服务器-客户端通信模式仍存在一些问题。1是公开密钥加密只能证明报文确实是发送方发送的且没有篡改，但发送方本身是谁则无从得知，因为谁都可以生成公钥私钥对。如果把所有需要访问的网站的公钥都事先保存下来，数量巨大不说，如何发送这些公钥且如何证明保存的公钥确实是这个网站的公钥也是个问题。数字证书则可以解决这些问题。</p>
<p>数字证书是网络上的身份证明。一般包括如下内容：</p>
<ul>
<li>证书格式版本号</li>
<li>证书序列号；</li>
<li>证书签名算法；</li>
<li>证书颁发者；</li>
<li>有效期；</li>
<li>对象名称；</li>
<li>对象公开密钥；</li>
<li>证书颁发者的数字签名；</li>
</ul>
<p>其中颁发者的数字签名是通过数字证书的其余部分的报文摘要经证书签名算法及证书颁发者的私有密钥计算出的，用于验证数字证书的真实性。</p>
<p>任何人都能自行生成一个数字证书，但只有值得信任的组织（CA）生成的数字证书才会默认被浏览器信任。具体原因在下一节说明。</p>
<h2 id="详解数字证书验证流程"><a href="#详解数字证书验证流程" class="headerlink" title="详解数字证书验证流程"></a>详解数字证书验证流程</h2><p>关于浏览器验证网站数字证书的流程网上的资料一般讲的都不是很清楚。在查阅了不少资料后终于搞清楚这部分。</p>
<p>CA下发给网站的证书都是一个证书链，也就是一层一层的证书，从根证书开始，到下级CA，一层一层，最后一层就是网站证书。</p>
<p>浏览器收到服务器发送的证书后，需要验证其真实性。而证书的签名是通过签名算法和<strong>上级CA</strong>的私钥生成的，并非很多文章里简单说的靠CA私钥生成。浏览器需要用上级CA的公钥才能解密签名，并与生成的指纹对比，那么问题来了，这个上级CA的公钥从哪来呢？</p>
<p>答案是此公钥来自于证书链该层的上级CA的证书明文内。单个X509v3证书由以下部分组成：</p>
<p>X.509v3证书由三部分组成：</p>
<ul>
<li>tbsCertificate (to be signed certificate)，待签名证书。</li>
<li>SignatureAlgorithm，签名算法。</li>
<li>SignatureValue，签名值。</li>
</ul>
<p>tbsCertificate又包含10项内容，在HTTPS握手过程中以明文方式传输：</p>
<ul>
<li>Version Number，版本号。</li>
<li>Serial Number，序列号。</li>
<li>Signature Algorithm ID，签名算法ID。</li>
<li>Issuer Name，发行者。</li>
<li>Validity period，有效时间。</li>
<li>Subject name ，证书主体名称。</li>
<li>Subject Public Key Info ，证书主体公钥信息，包含公钥算法和公钥值。</li>
<li>Issuer Unique Identifier (optional)，发行商唯一ID。</li>
<li>Subject Unique Identifier (optional)，主体唯一ID。</li>
<li>Extensions (optional)，扩展。</li>
</ul>
<p>证书链由多个证书一层一层组成的，除了最底层的网站证书的公钥是给用户加密报文外，其他层证书中的公钥均用于解密底层的证书指纹签名。最高层的根证书是<strong>自签名</strong>的，也就是自己颁发给自己，所以它的公钥不仅用来解密下层的签名，也用来给自己的签名解密。</p>
<p>验证证书是否真实的任务完成了，那么证书是否可靠如何验证呢？一句话，只要根证书可靠，整个证书链就可靠，而根证书是否可靠要看这个根证书是否在操作系统或浏览器内置的可信根证书内，在的话就可信。</p>
<h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>HTTPS是在HTTP报文发送给TCP之前对报文进行加密的安全协议。使用443端口进行通信。</p>
<p>普通的HTTP有如下四层：</p>
<ul>
<li>应用层HTTP</li>
<li>传输层TCP</li>
<li>网络层IP</li>
<li>数据链路层</li>
</ul>
<p>HTTPS多了一个安全层：</p>
<ul>
<li>应用层HTTP</li>
<li>安全层SSL/TLS</li>
<li>传输层TCP</li>
<li>网络层IP</li>
<li>数据链路层</li>
</ul>
<p>证书密钥验证都是在安全层验证。常用的SSL/TLS编程实现库是OPENSSL。</p>
<h2 id="HTTPS实际验证过程"><a href="#HTTPS实际验证过程" class="headerlink" title="HTTPS实际验证过程"></a>HTTPS实际验证过程</h2><p><em>此部分内容主要参考《SSL/TLS协议运行机制的概述》<a href="http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html</a></em></p>
<p>实际的HTTPS验证过程如下：</p>
<h3 id="ClientHello阶段"><a href="#ClientHello阶段" class="headerlink" title="ClientHello阶段"></a>ClientHello阶段</h3><ul>
<li>支持的协议版本，比如TLS 1.0版；</li>
<li>一个客户端生成的随机数，稍后用于生成”对话密钥”；</li>
<li>支持的加密方法，比如RSA公钥加密；</li>
<li>支持的压缩方法；</li>
</ul>
<h3 id="ServerHello阶段"><a href="#ServerHello阶段" class="headerlink" title="ServerHello阶段"></a>ServerHello阶段</h3><ul>
<li>确认使用的加密通信协议版本；</li>
<li>一个服务器生成的随机数，稍后用于生成”对话密钥”；</li>
<li>确认使用的加密方法，比如RSA公钥加密；</li>
<li>服务器证书；</li>
</ul>
<p>对于需要验证用户证书的还会包含请求要求用户提供证书。</p>
<h3 id="客户端回应"><a href="#客户端回应" class="headerlink" title="客户端回应"></a>客户端回应</h3><p>客户端收到回应后首先验证服务器证书：</p>
<ul>
<li>是否由可信CA颁布；</li>
<li>证书中域名是否与实际域名一致；</li>
<li>是否在有效期内；</li>
</ul>
<p>证书没问题的话客户端会回应以下内容：</p>
<ul>
<li>一个随机数（pre-master key)。该随机数用服务器公钥加密，防止被窃听；</li>
<li>编码改变通知，表示随后的信息都将用双方商定的加密方法和密钥发送；</li>
<li>客户端握手结束通知，表示客户端的握手阶段已经结束。这一项同时也是前面发送的所有内容的hash值，用来供服务器校验；</li>
</ul>
<p>此时通信双方都有了这三个随机数。通过商定的加密方法根据三个随机数生成一个相同的会话密钥SessionSecret，用于之后的对称加密。</p>
<h3 id="服务器回应"><a href="#服务器回应" class="headerlink" title="服务器回应"></a>服务器回应</h3><p>服务器收到回应后计算出SessionSecret，并发送以下内容给客户端：</p>
<ul>
<li>编码改变通知，表示随后的信息都将用双方商定的加密方法和密钥发送；</li>
<li>服务器握手结束通知，表示服务器的握手阶段已经结束。这一项同时也是前面发送的所有内容的hash值，用来供客户端校验</li>
</ul>
<p>这样HTTPS握手过程就结束了，之后就是通过HTTP发送经过对称加密的报文。</p>
<p>参考资料：</p>
<blockquote>
<ol>
<li>《HTTP权威指南》一书</li>
<li><a href="http://www.cnblogs.com/JeffreySun/archive/2010/06/24/1627247.html" target="_blank" rel="external">《数字证书原理》</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html" target="_blank" rel="external">《数字签名是什么？》</a></li>
<li><a href="https://cnodejs.org/topic/56eb698ec95e8f992473c5a3" target="_blank" rel="external">《HTTPS通信中的身份认证机制》</a></li>
<li><a href="http://liuqunying.blog.51cto.com/3984207/1664246" target="_blank" rel="external">《SSL证书必知必会：数字证书及CA基础知识》</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html" target="_blank" rel="external">《SSL/TLS协议运行机制的概述》</a></li>
<li><a href="http://op.baidu.com/2015/04/https-s01a01/" target="_blank" rel="external">《大型网站的 HTTPS 实践（一）—— HTTPS 协议和原理》</a></li>
<li><a href="https://hacpai.com/article/1447920990604" target="_blank" rel="external">《理解 HTTPS 原理，SSL/TLS 协议》</a></li>
<li><a href="http://www.barretlee.com/blog/2015/10/05/how-to-build-a-https-server/" target="_blank" rel="external">《HTTPS证书生成原理和部署细节》</a></li>
<li><a href="http://www.kevenwu.com/blogs/14/" target="_blank" rel="external">《HTTPS原理学习笔记》</a></li>
</ol>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;密钥&quot;&gt;&lt;a href=&quot;#密钥&quot; class=&quot;headerlink&quot; title=&quot;密钥&quot;&gt;&lt;/a&gt;密钥&lt;/h2&gt;&lt;p&gt;我们将未加密的内容称为明文，加密之后的内容称为密文。&lt;/p&gt;
&lt;p&gt;简单来说，要加密一段明文，可以将这段内容输入到一个加密函数中，输出密文。
    
    </summary>
    
      <category term="日常问题" scheme="sikaixing.com/categories/%E6%97%A5%E5%B8%B8%E9%97%AE%E9%A2%98/"/>
    
      <category term="基础知识" scheme="sikaixing.com/categories/%E6%97%A5%E5%B8%B8%E9%97%AE%E9%A2%98/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="HTTPS" scheme="sikaixing.com/tags/HTTPS/"/>
    
      <category term="网络" scheme="sikaixing.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Curl命令及PHP中Curl的应用</title>
    <link href="sikaixing.com/2016/03/15/curl-in-php/"/>
    <id>sikaixing.com/2016/03/15/curl-in-php/</id>
    <published>2016-03-14T16:25:26.000Z</published>
    <updated>2016-08-09T16:35:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Curl命令"><a href="#Curl命令" class="headerlink" title="Curl命令"></a>Curl命令</h2><p>参考资料：curl网站开发指南（<a href="http://www.ruanyifeng.com/blog/2011/09/curl.html）。" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2011/09/curl.html）。</a></p>
<ul>
<li>直接获取网页源码：curl www.sina.com</li>
<li>保存文件名：curl -o [文件名] www.sina.com</li>
<li>自动跳转：curl -L www.sina.com</li>
<li>显示源码以及header：curl -i www.sina.com</li>
<li>只显示header：curl -I www.sina.com</li>
<li>显示整个通信过程：curl -v www.sina.com</li>
<li>获取更详细的通信过程：curl –trace output.txt www.sina.com</li>
<li>发送get表单：curl example.com/form.cgi?data=xxx</li>
<li>发送post表单：curl -X POST –data “data=xxx” example.com/form.cgi</li>
<li>发送经过curl编码的post表单：curl -X POST–data-urlencode “date=April 1” example.com/form.cgi</li>
<li>其他动作：curl -X DELETE www.example.com</li>
<li>上传文件：curl –form upload=@localfilename –form press=OK [URL]</li>
<li>提供refer：curl –referer <a href="http://www.example.com" target="_blank" rel="external">http://www.example.com</a> <a href="http://www.example.com" target="_blank" rel="external">http://www.example.com</a></li>
<li>模拟UA：curl –user-agent “[User Agent]” [URL]</li>
<li>提供Cookie：curl –cookie “name=xxx” www.example.com</li>
<li>保存Cookie：curl -c cookies <a href="http://example.com" target="_blank" rel="external">http://example.com</a></li>
<li>使用Cookie文件：curl -b cookies <a href="http://example.com" target="_blank" rel="external">http://example.com</a></li>
<li>增加其他header：curl –header “Content-Type:application/json” <a href="http://example.com" target="_blank" rel="external">http://example.com</a></li>
<li>提供验证：curl –user name:password example.com</li>
</ul>
<h2 id="PHP中Curl"><a href="#PHP中Curl" class="headerlink" title="PHP中Curl"></a>PHP中Curl</h2><p>参考资料：<a href="http://php.net/manual/zh/curl.examples-basic.php" target="_blank" rel="external">http://php.net/manual/zh/curl.examples-basic.php</a></p>
<p>使用cURL函数的基本思想是先使用<code>curl_init()</code>初始化一个cURL会话，接着你可以通过<code>curl_setopt()</code>设置你需要的全部选项，然后使用<code>curl_exec()</code>来执行会话，当执行完会话后使用<code>curl_close()</code>关闭会话。这是一个使用cURL函数获取example.com的主页保存到文件的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">$ch = curl_init(&quot;http://www.example.com/&quot;);</div><div class="line">$fp = fopen(&quot;example_homepage.txt&quot;, &quot;w&quot;);</div><div class="line"></div><div class="line">curl_setopt($ch, CURLOPT_FILE, $fp);</div><div class="line">curl_setopt($ch, CURLOPT_HEADER, 0);</div><div class="line"></div><div class="line">curl_exec($ch);</div><div class="line">curl_close($ch);</div><div class="line">fclose($fp);</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Curl命令&quot;&gt;&lt;a href=&quot;#Curl命令&quot; class=&quot;headerlink&quot; title=&quot;Curl命令&quot;&gt;&lt;/a&gt;Curl命令&lt;/h2&gt;&lt;p&gt;参考资料：curl网站开发指南（&lt;a href=&quot;http://www.ruanyifeng.com/blo
    
    </summary>
    
      <category term="编程语言" scheme="sikaixing.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="PHP" scheme="sikaixing.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/PHP/"/>
    
    
      <category term="PHP" scheme="sikaixing.com/tags/PHP/"/>
    
      <category term="Curl" scheme="sikaixing.com/tags/Curl/"/>
    
  </entry>
  
  <entry>
    <title>SAE 上使用PHP搭建微信公众号后台</title>
    <link href="sikaixing.com/2016/03/15/wechat_in_sae/"/>
    <id>sikaixing.com/2016/03/15/wechat_in_sae/</id>
    <published>2016-03-14T16:09:26.000Z</published>
    <updated>2016-10-26T03:44:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><h3 id="SAE准备"><a href="#SAE准备" class="headerlink" title="SAE准备"></a>SAE准备</h3><p><em>SAE的应用平台提供了一个语言环境。比如提供了PHP环境的应用即可运行PHP代码。当然环境中也可以放HTML和CSS，将要展示的页面命名为index.html即可。</em></p>
<p>SAE的申请略过。创建一个PHP5.6空应用，代码管理中打开git。本地文件就可以通过Git命令上传到SAE上了。具体命令SAE页面有写。<br>应用有个地址，记下来，需要填到微信中。</p>
<h3 id="微信准备"><a href="#微信准备" class="headerlink" title="微信准备"></a>微信准备</h3><p>申请微信公众号略过。在后台的开发项中修改配置。其中：</p>
<ul>
<li>URL：填刚刚SAE中创建的应用地址</li>
<li>Token：自己想填什么都可以</li>
<li>EncodingAESKey：可以随机生成的加密密钥</li>
<li>加解密方式：一开始建议明文，熟悉了之后可以使用密文模式</li>
</ul>
<p>之后需要在SAE的应用端验证一下这个地址可用才能启用开发者模式。<br>参考微信官方文档：<a href="http://mp.weixin.qq.com/wiki/8/f9a0b8382e0b77d87b3bcc1ce6fbc104.html" target="_blank" rel="external">http://mp.weixin.qq.com/wiki/8/f9a0b8382e0b77d87b3bcc1ce6fbc104.html</a> ，直接把PHP示例代码下载下来，代码里的TOKEN填刚刚配置中填的，文件名修改为index.php。<br>接着通过Git上传到SAE中。<br>确定上传完成后即可点击微信后台中的启用，如果SAE上正常运行了刚刚上传的php的话就能够启用成功。</p>
<h2 id="开始写后台"><a href="#开始写后台" class="headerlink" title="开始写后台"></a>开始写后台</h2><h3 id="官方代码"><a href="#官方代码" class="headerlink" title="官方代码"></a>官方代码</h3><p>刚刚下载的示例代码不仅有验证函数，还有一个用于响应公众号用户消息的函数<code>responseMsg()</code>。我们先试着用示例代码写一些功能。<br>将刚刚修改的本地index.php文件中的<code>$wechatObj-&gt;valid();</code>注释掉，在下面添加一行<code>$wechatObj-&gt;responseMsg();</code> 再次上传修改 <code>git commit</code>,<code>git push</code>。如果代码正常上传的话你给这个公众号发消息应该都能收到回复了。</p>
<h3 id="写一个获取天气的功能"><a href="#写一个获取天气的功能" class="headerlink" title="写一个获取天气的功能"></a>写一个获取天气的功能</h3><h4 id="通过API获取天气信息并返回"><a href="#通过API获取天气信息并返回" class="headerlink" title="通过API获取天气信息并返回"></a>通过API获取天气信息并返回</h4><p><del>网上搜索得到一个简单的天气查询网址：<a href="http://mobile.weather.com.cn/data/sk/101340101.html" target="_blank" rel="external">http://mobile.weather.com.cn/data/sk/101340101.html</a> 和 <a href="http://mobile.weather.com.cn/data/sk/101340101.html" target="_blank" rel="external">http://mobile.weather.com.cn/data/sk/101340101.html</a> ，其中101340101表示weather.com.cn使用的城市编码，所有对应编码可见参考资料2。这里我们将参考资料2的所有对应编码保存到本地weathercode.xml中。</del><br>更新：weather.com.cn的接口无法使用了。使用<a href="http://www.heweather.com代替。(先在官网申请账户，API" target="_blank" rel="external">http://www.heweather.com代替。(先在官网申请账户，API</a> <a href="https://api.heweather.com/x3/weather?cityid=城市ID&amp;key=你的认证key）" target="_blank" rel="external">https://api.heweather.com/x3/weather?cityid=城市ID&amp;key=你的认证key）</a></p>
<p>此处我们选择使用cURL的方式获取网页返回，因为这种方式比较方便且SAE官方声明支持cURL（<a href="http://www.sinacloud.com/doc/sae/php/fetchurl.html?highlight=curl）" target="_blank" rel="external">http://www.sinacloud.com/doc/sae/php/fetchurl.html?highlight=curl）</a></p>
<p>根据参考资料5的示例代码可以写出获取台北天气的代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">//$wt = curl_init(&quot;http://mobile.weather.com.cn/data/sk/101340101.html&quot;);</div><div class="line">$wt = curl_init(&quot;https://api.heweather.com/x3/weather?cityid=CN101340101&amp;key=你的认证key</div><div class="line">curl_setopt($wt,CURLOPT_RETURNTRANSFER,1);</div><div class="line">$weatherjson = curl_exec($wt);</div><div class="line">curl_close($wt);</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>要获取指定城市的天气需要读取xml。但读取xml较麻烦（见参考资料6），于是将weathercode.xml手动转换为json格式。读取文件并转换为数组的代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$jsoncontent = file_get_contents(&apos;weathercode.json&apos;);</div><div class="line">$weatherarray = json_decode($jsoncontent);</div></pre></td></tr></table></figure>
<p>对于获取的json由于层数太多使用PHP处理太复杂，直接使用正则表达式获取需要的内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">preg_match(&quot;/\&quot;now\&quot;:&#123;.*?&#123;.*?&#125;.*?&#125;.*?&#125;/&quot;,$json,$matches);</div><div class="line">echo $matches[0];</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>实现功能的完整的代码部分如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">if(!empty( $keyword ))</div><div class="line">            &#123;</div><div class="line">                if(strpos($keyword,&quot;天气&quot;)!==false)</div><div class="line">                &#123;</div><div class="line">                    //get weather by user input</div><div class="line">                    $location = str_ireplace(&quot;天气&quot;, &quot;&quot;,$keyword);</div><div class="line">                    $jsoncontent = file_get_contents(&apos;weathercode.json&apos;);</div><div class="line">                    $locationarray = json_decode($jsoncontent, true);</div><div class="line">                    $locationcode = $locationarray[$location];</div><div class="line">                    $cncode = &quot;CN&quot; . $locationcode;</div><div class="line"></div><div class="line">                    //weather can&apos;t use,use heweather instead</div><div class="line">                    //$wt = curl_init(&quot;http://mobile.weather.com.cn/data/sk/$locationcode.html&quot;);</div><div class="line">                    $wt = curl_init(&quot;https://api.heweather.com/x3/weather?cityid=$cncode&amp;key=你的认证key&quot;);</div><div class="line"></div><div class="line">                    curl_setopt($wt,CURLOPT_RETURNTRANSFER,1);</div><div class="line">                    //curl_setopt($wt,CURLOPT_REFERER,&apos;http://mobile.weather.com.cn/&apos;);</div><div class="line">                    $weatherjson = curl_exec($wt);</div><div class="line">                    //the limit of word</div><div class="line">                    //$weatherarray = json_decode($weatherjson);</div><div class="line">                    //$weathernow = $weatherarray-&gt;&#123;&apos;HeWeather data service 3.0&apos;&#125;;</div><div class="line">                    curl_close($wt);</div><div class="line">                    preg_match(&quot;/\&quot;now\&quot;:(&#123;.*?&#123;.*?&#125;.*?&#125;.*?&#125;)/&quot;,$weatherjson,$matches);</div><div class="line">                    $weathernow = $matches[1];</div><div class="line">                    $msgType = &quot;text&quot;;</div><div class="line">                    $contentStr = $weathernow;</div><div class="line">                    $resultStr = sprintf($textTpl, $fromUsername, $toUsername, $time, $msgType, $contentStr);</div><div class="line">                    echo $resultStr;</div><div class="line"></div><div class="line">                &#125;</div></pre></td></tr></table></figure>
<h4 id="格式化返回的数据"><a href="#格式化返回的数据" class="headerlink" title="格式化返回的数据"></a>格式化返回的数据</h4><p>返回的数据类似于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;now&quot;:&#123;&quot;cond&quot;:&#123;&quot;code&quot;:&quot;101&quot;,&quot;txt&quot;:&quot;多云&quot;&#125;,&quot;fl&quot;:&quot;11&quot;,&quot;hum&quot;:&quot;46&quot;,&quot;pcpn&quot;:&quot;0&quot;,&quot;pres&quot;:&quot;1021&quot;,&quot;tmp&quot;:&quot;12&quot;,&quot;vis&quot;:&quot;10&quot;,&quot;wind&quot;:&#123;&quot;deg&quot;:&quot;120&quot;,&quot;dir&quot;:&quot;东风&quot;,&quot;sc&quot;:&quot;3-4&quot;,&quot;spd&quot;:&quot;11&quot;&#125;&#125;</div></pre></td></tr></table></figure></p>
<p>根据官方API说明，通过正则获取内容，即可获得格式化的内容。</p>
<h4 id="添加对错误城市的处理"><a href="#添加对错误城市的处理" class="headerlink" title="添加对错误城市的处理"></a>添加对错误城市的处理</h4><p>有些时候用户会输入不存在的城市天气查询，这样返回的结果比较不好看。可以加一个判断部分,在输入不存在的城市时提示检查输入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">if($locationcode) &#123;</div><div class="line"></div><div class="line">……</div><div class="line"></div><div class="line">&#125;</div><div class="line">else &#123;</div><div class="line">                        $contentStr = &quot;没有找到这个城市哦~ 请确认城市或区名。示例1: 南京天气; 示例2: 海淀天气&quot;;</div><div class="line">                        $resultStr = sprintf($textTpl, $fromUsername, $toUsername, $time, $msgType, $contentStr);</div><div class="line">                        echo $resultStr;</div></pre></td></tr></table></figure>
<p>这样天气查询的代码就算完成了~</p>
<p>参考资料：</p>
<blockquote>
<ol>
<li><a href="http://www.wjxfpf.com/2015/10/69618.html" target="_blank" rel="external">《中国天气网 天气预报API 国家气象局 根据城市名称抓取城市ID，XML格式、JSON格式、图片代码》</a></li>
<li><a href="http://www.wjxfpf.com/2015/10/279028.html" target="_blank" rel="external">《中国天气网天气预报API接口城市代码，XML格式，数据具体到县、区级别》</a></li>
<li><a href="http://www.php-note.com/article/detail/161" target="_blank" rel="external">《【荐】怎么用PHP发送HTTP请求（POST请求、GET请求）?》</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2011/09/curl.html" target="_blank" rel="external">《curl网站开发指南》</a></li>
<li><a href="http://php.net/manual/zh/book.curl.php" target="_blank" rel="external">《http://php.net/manual/zh/book.curl.php》</a></li>
<li><a href="http://blog.csdn.net/guoguo1980/article/details/2436318" target="_blank" rel="external">《PHP通过SimpleXML访问xml文档》</a></li>
<li><a href="http://us3.php.net/manual/zh/function.json-decode.php" target="_blank" rel="external">《json_decode》</a></li>
<li><a href="http://www.crazyant.net/920.html" target="_blank" rel="external">《PHP创建和解析JSON数据的方法》</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2011/01/json_in_php.html" target="_blank" rel="external">《在PHP语言中使用JSON》</a></li>
<li><a href="http://cuiqingcai.com/1186.html" target="_blank" rel="external">《PHP高级特性一之正则表达式用法》</a></li>
</ol>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;准备阶段&quot;&gt;&lt;a href=&quot;#准备阶段&quot; class=&quot;headerlink&quot; title=&quot;准备阶段&quot;&gt;&lt;/a&gt;准备阶段&lt;/h2&gt;&lt;h3 id=&quot;SAE准备&quot;&gt;&lt;a href=&quot;#SAE准备&quot; class=&quot;headerlink&quot; title=&quot;SAE准备&quot;&gt;
    
    </summary>
    
      <category term="编程语言" scheme="sikaixing.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="PHP" scheme="sikaixing.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/PHP/"/>
    
    
      <category term="PHP" scheme="sikaixing.com/tags/PHP/"/>
    
      <category term="SAE" scheme="sikaixing.com/tags/SAE/"/>
    
      <category term="微信" scheme="sikaixing.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>Centos7中使用shadowsocks建立多用户并控制流量全记录</title>
    <link href="sikaixing.com/2016/03/06/ss_manyuser/"/>
    <id>sikaixing.com/2016/03/06/ss_manyuser/</id>
    <published>2016-03-06T02:00:00.000Z</published>
    <updated>2016-12-18T10:28:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="manyuser安装及启用"><a href="#manyuser安装及启用" class="headerlink" title="manyuser安装及启用"></a>manyuser安装及启用</h2><h3 id="下载及依赖库安装"><a href="#下载及依赖库安装" class="headerlink" title="下载及依赖库安装"></a>下载及依赖库安装</h3><h4 id="下载manyuser"><a href="#下载manyuser" class="headerlink" title="下载manyuser"></a>下载manyuser</h4><p>shadowsocks manyuser是一个shadowsocks多用户修改版。官方地址：<a href="https://github.com/mengskysama/shadowsocks/tree/manyuser" target="_blank" rel="external">https://github.com/mengskysama/shadowsocks/tree/manyuser</a></p>
<p>下载：<br><code>git clone -b manyuser https://github.com/mengskysama/shadowsocks.git</code><br>会在当前目录下载manyuser。<br>解压出来为/shadowsocks/shadowsocks</p>
<h4 id="安装及使用Mysql"><a href="#安装及使用Mysql" class="headerlink" title="安装及使用Mysql"></a>安装及使用Mysql</h4><p>manyuser使用Mysql存储数据。故需要先安装mysql，centos7中默认为mariaDB（myspl修改版）</p>
<p><code>yum install mariadb-server mariadb</code></p>
<ul>
<li><p>启动及关闭：<br><code>systemctl start mariadb</code><br><code>systemctl enable mariadb</code></p>
</li>
<li><p>修改密码：<br><code>/usr/bin/mysql_secure_installation</code></p>
</li>
<li><p>登录：<br><code>mysql -u root -p</code></p>
</li>
<li><p>根据manyuser官方指南需要创建一个shadowsocks数据库：<br><code>create database shadowsocks</code></p>
</li>
<li><p>选择数据库<br><code>use shadowsocks</code></p>
</li>
<li><p>导入下载的manyuser的/shadowsocks/shadowsocks/下的shadowsocks.sql脚本：<br><code>source /shadowsocks/shadowsocks/shadowsocks.sql</code><br>脚本会自动在数据库中建立一个user表。<br>查看脚本写入的内容：<br><code>show tables</code></p>
</li>
<li><p>查看表内容：<br><code>select * from user</code><br>其中：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">passwd: server pass</div><div class="line"></div><div class="line">port: server port</div><div class="line"></div><div class="line">t: last keepalive time</div><div class="line"></div><div class="line">u: upload transfer</div><div class="line"></div><div class="line">d: download transer</div><div class="line"></div><div class="line">transfer_enable: if u + d &gt; transfer_enable this server will be stop (db_transfer.py del_server_out_of_bound_safe)</div></pre></td></tr></table></figure>
<ul>
<li><p>添加内容：<br><code>insert into user() values()</code></p>
</li>
<li><p>修改内容<br><code>update 表名称 set 列名称=新值 where 更新条件;</code></p>
</li>
<li><p>新建一个数据库用户以方便shadowsocks程序管理数据库：<br><code>create user ssuser@localhost identified by &#39;passwd&#39;</code><br>授权：<br><code>grant all on shadowsocks.* to &#39;ssuser&#39;@&#39;localhost&#39;</code></p>
</li>
</ul>
<h4 id="安装其他依赖"><a href="#安装其他依赖" class="headerlink" title="安装其他依赖"></a>安装其他依赖</h4><p><code>yum install m2crypto</code><br><code>pip install cymysql</code></p>
<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p><code>vi Config.py</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#Config Example</div><div class="line">MYSQL_HOST = &apos;localhost&apos;</div><div class="line">MYSQL_PORT = 3306</div><div class="line">MYSQL_USER = &apos;ssuser&apos;</div><div class="line">MYSQL_PASS = &apos;passwd&apos;</div><div class="line">MYSQL_DB = &apos;shadowsocks&apos;</div><div class="line"></div><div class="line">MANAGE_PASS = &apos;ss233333333&apos;</div><div class="line">#if you want manage in other server you should set this value to global ip</div><div class="line">MANAGE_BIND_IP = &apos;127.0.0.1&apos;</div><div class="line">#make sure this port is idle</div><div class="line">MANAGE_PORT = 23333</div></pre></td></tr></table></figure>
<h3 id="防火墙配置"><a href="#防火墙配置" class="headerlink" title="防火墙配置"></a>防火墙配置</h3><p>不要忘记在系统防火墙中开启需要使用的端口：<br><code>firewall-cmd --zone=public --add-port=50000/tcp --permanent</code><br><code>firewall-cmd --reload</code></p>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p><code>python server.py</code><br>如果没有报错就说明启动正常了。<br>后台运行且注销也不停止：<br><code>nohup python server.py &gt; /dev/null 2&gt;&amp;1 &amp;</code></p>
<p>开机启动：（无法正常执行）<br>开机启动mariadb:<br><code>systemctl enable mariadb</code><br>开机启动many-user:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /shadowsocks/shadowsocks/ # server.py配置文件在这个目录中，调用要先进入这个目录</div><div class="line">python server.py --fast-open</div></pre></td></tr></table></figure></p>
<h3 id="本地配置"><a href="#本地配置" class="headerlink" title="本地配置"></a>本地配置</h3><p>本地配置的服务器IP填VPS的IP，端口和密码填VPS上服务开启后显示的端口和密码（也就是数据库表中的port和passwd），加密方式选rc4-md5。即可正常使用。</p>
<blockquote>
<p>《<a href="http://www.phpini.com/linux/redhat-centos-7-setup-apache-mariadb-php" target="_blank" rel="external">RHEL 及 CentOS 7 安裝 Apache, MariaDB, PHP(LAMP)</a>》<br>《<a href="http://www.cnblogs.com/mr-wid/archive/2013/05/09/3068229.html" target="_blank" rel="external">21分钟 MySQL 入门教程</a>》<br>《<a href="http://www.cnblogs.com/Dot-Boy/archive/2008/08/04/1260185.html" target="_blank" rel="external">mysql导入sql脚本</a>》<br>《<a href="http://www.111cn.net/database/mysql/46288.htm" target="_blank" rel="external">mysql 创建用户与授权、修改密码</a>》</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;manyuser安装及启用&quot;&gt;&lt;a href=&quot;#manyuser安装及启用&quot; class=&quot;headerlink&quot; title=&quot;manyuser安装及启用&quot;&gt;&lt;/a&gt;manyuser安装及启用&lt;/h2&gt;&lt;h3 id=&quot;下载及依赖库安装&quot;&gt;&lt;a href=&quot;#下
    
    </summary>
    
      <category term="日常问题" scheme="sikaixing.com/categories/%E6%97%A5%E5%B8%B8%E9%97%AE%E9%A2%98/"/>
    
      <category term="日常工具" scheme="sikaixing.com/categories/%E6%97%A5%E5%B8%B8%E9%97%AE%E9%A2%98/%E6%97%A5%E5%B8%B8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="shadowsocks" scheme="sikaixing.com/tags/shadowsocks/"/>
    
      <category term="Centos" scheme="sikaixing.com/tags/Centos/"/>
    
  </entry>
  
</feed>
